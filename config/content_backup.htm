<h1>About</h1>
<p>這裡是國立虎尾科技大學機械設計工程系大一計算機程式課程網頁, 與本課程相關的網頁與倉儲如下:</p>
<h4>Github Pages 網站:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019">http://mde.tw/cp2019</a> (本網頁的 Github Pages)</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019_fall">http://mde.tw/cp2019_fall</a> (本課程的規劃網頁)</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019_summer">http://mde.tw/cp2019_summer</a> (本課程的參考網頁)</p>
<h4>Github 倉儲:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cp2019">https://github.com/mdecourse/cp2019</a></p>
<p style="padding-left: 30px;"><span><a href="https://github.com/mdecourse/cp2019_fall">https://github.com/mdecourse/cp2019_fall</a></span></p>
<p style="padding-left: 30px;"><span><a href="https://github.com/mdecourse/cp2019_summer">https://github.com/mdecourse/cp2019_summer</a></span></p>
<p><span></span></p>
<p></p><h2>QandA</h2>
<p>與計算機程式課程有關的問題, 請在 <a href="https://github.com/mdecourse/cp2019/issues/4">https://github.com/mdecourse/cp2019/issues/4</a> 中提出.</p>
<p>在校區內所使用的電腦, 可以透過 <a href="https://software.nfu.edu.tw/">https://software.nfu.edu.tw/</a> 取得各項教育版軟體, 其中包括 Windows 操作系統與 MS Office 以及 AutoDesk 教育版相關套件.</p>
<p>當使用者位於校區外, 希望連線使用校區內的相關電腦資料, 包括下載教育版軟體或使用各項電子期刊或電子書, 可以利用 <a href="https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn">https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn</a> 連線後使用.</p><h2>USB 隨身碟</h2>
<p>本課程建議使用隨身碟儲存所有與課程相關的倉儲或網頁資料, 也可只將與個人設定相關及倉儲存放在 USB 隨身碟中.</p>
<p>注意: 將資料存入 USB 隨身碟之前, 務必檢查所使用格式化的規格, 一般出廠 USB 格式化仍採用 <a href="https://zh.wikipedia.org/wiki/FAT">FAT32</a> 格式, 之後將無法存放大於 4GB 的檔案, 因此建議使用之前將 USB 隨身碟格式化為<a href="https://zh.wikipedia.org/wiki/ExFAT"> exFAT</a> 格式.</p>
<h4>USB 存放整個可攜系統</h4>
<p>優點:</p>
<p style="padding-left: 30px;">可以自行配置安裝系統中的模組</p>
<p>缺點:</p>
<p style="padding-left: 30px;">執行速度比硬碟慢</p>
<h4>USB 只存放設定與自我倉儲</h4>
<p>優點:</p>
<p style="padding-left: 30px;">執行速度較全部存入 USB 快</p>
<p>缺點:</p>
<p style="padding-left: 30px;">其他用戶對硬碟系統資料更動後, 使用上會受影響.</p><h2>課程筆記</h2>
<h4>利用倉儲與網頁紀錄筆記</h4>
<p>優點:</p>
<p style="padding-left: 30px;">快速方便且能引入大量線上靜態與動態影片資料</p>
<p>缺點:</p>
<p style="padding-left: 30px;">必須要透過歷程資料才能看出資料紀載順序</p>
<p style="padding-left: 30px;">若電腦無法開機或網路無法使用時, 將無法查閱相關資料</p>
<h4>利用紙本筆記</h4>
<p>優點:</p>
<p style="padding-left: 30px;">手寫將資料謄入紙本時, 可以加強對資料的記憶</p>
<p style="padding-left: 30px;">可以按照順序紀載歷程資料</p>
<p>缺點:</p>
<p style="padding-left: 30px;">必須隨身攜帶筆記本</p>
<p style="padding-left: 30px;">比較難以放入網路上的各項連結資料</p><h1>課程簡介</h1>
<p>說明課程進行方式, 評分方式與課程目標</p>
<p>課程進行方式 - 每週講解與示範, 並錄下基本操作影片素材, 週四上機與助教時間, 分組建立帶有字幕的教學影片, 各組員與小組每週維護倉儲與網站內容.</p>
<p>評分方式 - 利用線上表單, 學員每週進行自評與互評, 教師根據各組員與小組所完成的教學影片, 倉儲維護歷程與網站內容進行評分, 依照上述三種成績與相關流程計算各學員期中與期末成績.</p>
<p>課程目標 - 學員可利用 Git, Fossil SCM 與 Github 進行分組協同, 獨立維護網站, 利用帶有字幕的教學影片與網頁內容進行工程表達, 學習如何利用電腦、網路與程式執行協同機械產品設計分析與開發.</p>
<p>附註:</p>
<p>因機械設計產品開發之異地協同設計需求, 而衍生出對於建立 USB 可攜程式隨身碟之必要.</p>
<p>因同步分散式程式開發之模式, 而衍生出對於分散式版次管理系統之需求.</p>
<p>因追求最佳化機械設計流程開發, 而衍生出利用程式及網路進行工程分析之需求.</p>
<p>因為透過帶字幕的教學影片製作, 可證明對於特定計算機程式主題的了解程度, 並藉由網站簡報資料的建立與發布, 可提高各學員相互學習的成效.</p><h1>亂數分組</h1>
<p>流程圖符號</p>
<p><img alt="" height="550" src="/images/flowchart_symbols.png" width="ˋ400"/></p>
<p>上課第一週即進行學員亂數分組, 計算機程式的實際應用與程式對應語法的介紹, 將從此一程式的開發啟動</p>
<p>基本流程:</p>
<p>取得各班修課程成員的學號資料</p>
<p>決定每組幾人</p>
<p>將學員學號資料的次序弄亂</p>
<p>依據每組幾人, 從頭開始分組, 以確定各組成員</p>
<p>若最後一組人數過少, 將分別依序捕到前述已經分組的組別中</p>
<p>在課程加退選階段結束後, 各組再清算所餘人數是否得當, 不排除重新分組</p>
<p>各班檢討是否整個學期只分組一次, 或分組兩次, 或更多次的優缺點, 依據討論結果進行後續課程任務分組</p>
<p>為何使用 Python?</p>
<p>If you do much work on computers, eventually you find that there’s some task you’d like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI application, or a simple game.</p>
<p>If you’re a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow. Perhaps you’re writing a test suite for such a library and find writing the testing code a tedious task. Or maybe you’ve written a program that could use an extension language, and you don’t want to design and implement a whole new language for your application.</p>
<p>Python is just the language for you.</p>
<p>首先我們將採用 Python 進行亂數分組, 各分組也可以研究看看, 假如採用 C, C++, Java, Javascript, Lua 或 Dart 進行類似的工作, 該如何進行?</p>
<p>是直接在命令列中執行, 寫一個配合的 GUI, 在網頁介面中執行, 或者在手機或平板上執行? 各有何種應用情境? </p><h1>github 帳號</h1>
<p>建立 cp2019 倉儲及對應的 CMSiMDE Github Pages 網頁</p>
<p>了解基本的 Git 指令與 Github 系統的應用之後, 產生出對 GitExtensions 工具的需求, 也產生出對於透過 SSH keys 提交倉儲版本的需求, 以簡化改版流程.</p>
<p><a href="https://2019wcm.blogspot.com/search/label/GitExtensions" rel="nofollow">https://2019wcm.blogspot.com/search/label/GitExtensions</a></p>
<p><a href="https://2019wcm.blogspot.com/search/label/ssh" rel="nofollow">https://2019wcm.blogspot.com/search/label/ssh</a></p>
<p>申請 Github 帳號</p>
<p>登入 @gm 電子郵箱, 然後以學號申請 Github 帳號, 待驗證所使用的學號@gm 電子郵箱後, 即可建立 cp2019 倉儲, 特別注意新增 public repository 時, 可啟用 README.md, 隨即可以在近端以</p>
<p>git clone <a href="https://github.com/學號/cp2019.git">https://github.com/學號/cp2019.git</a></p>
<p>將遠端 Github 倉儲中的資料, clonr 至 y:\tmp 目錄的 cp2019 目錄中.</p>
<p>clone 後的 cp2019 目錄有 .git 目錄, 存放該倉儲的設定與版本資料, 以及 README.md 檔案.</p>
<p>在 .git 目錄中, 與使用者相關的是 config</p>
<p>利用 git submodule add 納入 CMSiMDE 網際內容管理系統的程式碼</p>
<p>https://github.com/mdecourse/cmsimde</p>
<p>利用命令列視窗, 更換目錄至 y:\tmp\cp2019 之後, 執行</p>
<p>git submodule add https://github.com/mdecourse/cmsimde.git cmsimde</p>
<p><br/>意即, 在此目錄中, 將 https://github.com/mdecourse/cmsimde.git 倉儲資料納為近端 cmsimde 目錄的內容, 且作為 submodule, 也就是設定一個倉儲的子模組, 並將此子模組與 https://github.com/mdecourse/cmsimde.git 倉儲目前的最新版本內容.</p>
<p>將子模組中 up_dir 目錄中的內容往前搬一個目錄</p>
<p>在 y:\tmp\cp2019\cmsimde 目錄中, 以</p>
<p>python wsgi.py</p>
<p>就可以啟動近端的動態網際內容管理系統, 作為近端改版之用, 可以瀏覽器中的 https://localhost:9443 連接所啟用的 CMS (Content Management System).</p>
<p>並以 admin 管理者密碼登入.</p>
<p>進入 config 修改網頁標題, 並且修改倉儲中的 init.py, 修改 site_title</p>
<p>改版後要推送資料前, 可以利用 generate_pages 將內容轉為動態網頁後, 可以利用 SciTE 開啟倉儲中的 http-server.py 檔案後以 Tools -&gt; Go 執行, 可以在瀏覽器中以 <a href="https://localhost:8444">https://localhost:8444</a> 檢查近端的靜態網頁內容, 確定無誤後. 則必須再退回 y:\tmp\cp2019 目錄之後, 必須完成 git config 的 user.name 與 user.email 之後, 可以利用:</p>
<p>git add .<br/>git commit -m "提交說明"<br/>git push</p>
<p>以 SSH 對 cp2019 倉儲進行改版</p>
<p>如何產生所需的 keys, 放在哪裡, public key 要送到哪裡, 設定如何寫, 在 http 模式下, 代理主機如何執行設定, 在 ssh 模式下, 代理主機要如何設定? 若近端啟動後使用超過一個 github 帳號身分, 又如何設定 http 與 ssh 模式下的倉儲改版與提交?</p>
<h2>Github Guide</h2>
<p><a href="https://guides.github.com/">https://guides.github.com/</a></p>
<p><a href="https://guides.github.com/activities/hello-world/">https://guides.github.com/activities/hello-world/</a></p><h1>示範專案</h1>
<p>Python: 一般運算與資料處理應用, 網際內容管理, GUI for 電腦輔助機械設計工程分析</p>
<p>ANSI C: 建立 Fossil SCM</p>
<p>C++: Solvespace 與 Pyslvs 平面機構合成與分析內之幾何運算核心</p>
<p>Dart: 配合 Flutter SDK 開發手機應用程式</p>
<p>手機程式作為介面 &lt;-&gt; Python Flask 作為 Server 端程式負責與其他 C/C++/Python 核心執行運算</p><h2>Python</h2>
<p><a href="/downloads/python3.7.2_tutorial.pdf">python 3.7.2 tutorial.pdf</a></p>
<p>亂數分組與 CMSiMDE</p>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p></p><h2>ANSIC</h2>
<p>Fossil SCM</p>
<p><a href="https://www.fossil-scm.org/">https://www.fossil-scm.org</a></p><h2>C++</h2>
<p>Solvespace and Pyslvs</p>
<p><a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p>
<p><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p><h2>Flutter</h2>
<p><a href="https://flutter.dev/docs">https://flutter.dev/docs</a></p>
<p>第一步:</p>
<p style="padding-left: 30px;">登入 @gm 電子郵箱後, 下載可放入 USB 隨身碟運作的可攜 <a href="https://drive.google.com/file/d/1_Mfw1U8yUkYGlVcoFzpvijtRFdKgP93U/view?usp=sharing">flutter_portable_final.7z</a></p>
<p>第二步:</p>
<p style="padding-left: 30px;">解開 flutter_portable_final.7z, 並在執行手機程式開發的 Windows 10 64 位元電腦上安裝 <a href="https://www.bluestacks.com/">https://www.bluestacks.com</a> (也可以安裝 ref 目錄中的 Bluestacks 4.0 舊版本)</p>
<p style="padding-left: 30px;">之後, 我們可以直接啟動  Flutter 隨身系統後, 利用電腦上的 Bluestacks 執行手機程式.</p>
<p>第三步:</p>
<p style="padding-left: 30px;">啟動 Flutter 可攜系統後, 可以直接在命令列中輸入 code, 啟動 Visual Studio Code 程式編輯系統.</p>
<p>第四步:</p>
<p style="padding-left: 30px;">執行第二步在操作系統中所安裝的 Bluestacks, 開啟後, 在命令列中以 adb connect localhost:5555, 以便之後將 Visual Studio Code 中的 Flutter 程式結果呈現在 Bluestacks 虛擬手機畫面中.</p>
<p style="padding-left: 30px;">由於 Bluestacks 採用與 Virualbox 相同的虛擬主機模式, 適合在 CPU 等級較低的電腦上執行開發, 也可以在 Visual Studio Code 中按下 Ctrl + Shift + P, 然後輸入 flutter, 除了可以新建 Flutter 專案外, 也可以透過 Android Virtual Devices 指令, 建立 emulator, 並將編譯完成的手機程式結果, 呈現在對應的 emulator 中.</p>
<p style="padding-left: 30px;">當然, 若使用者已經安裝並設置<a href="https://developer.android.com/studio/run/win-usb">https://developer.android.com/studio/run/win-usb</a>, 也可以直接利用 USB 連接實體 Android 手機進行程式開發測試.</p><h3>Dart</h3>
<p><a href="https://dart.dev/guides/language">https://dart.dev/guides/language</a></p>
<p><a href="https://dart.dev/guides/language/language-tour">https://dart.dev/guides/language/language-tour</a></p>
<p><a href="https://dart.dev/tools/sdk/archive">https://dart.dev/tools/sdk/archive</a></p>
<p><a href="https://dartpad.dartlang.org/">https://dartpad.dartlang.org/</a></p>
<p><a href="https://flutter.dev/">https://flutter.dev/</a></p>
<p><a href="https://github.com/flutter/samples">https://github.com/flutter/samples</a></p>
<p><a href="https://github.com/Solido/awesome-flutter">https://github.com/Solido/awesome-flutter</a></p>