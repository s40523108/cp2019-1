<h1>About</h1>
<h4>課程工具套件:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/dartpad">https://mde.tw/dartpad</a> </p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1fxMdqdCoCL__O1IpZ-Sv-A_4-c77Wx4E/view?usp=sharing">2019Fall可攜套件.7z</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1oUbvEWYbWAZM6nIfhQqC8oCcb9fcCJ5F/view?usp=sharing">GitExtensions.7z</a></p>
<p style="padding-left: 30px;">登入 @gm 帳號後, <a href="https://drive.google.com/drive/folders/1Ol8wJliQOn5okkGrdWauP1HC_DhwHTG4?usp=sharing">下載 Dart for begineer video</a></p>
<h4><span><a href="https://drive.google.com/open?id=1cZFSsLEoGOBYojzKzFEf4YH2l--pbS-9"></a></span>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h4>2019 Fall 學期教育目標:</h4>
<p>使用可攜程式系統、網際內容管理系統與 Github, 管理各學員與分組學習內容, 同時利用 Dart 程式語言, 設法打造可用於電腦輔助機械設計流程的工具.</p>
<h4>參考書:</h4>
<p style="padding-left: 30px;">1. Dart for Absolute Beginners (2014)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-6482-8">https://link.springer.com/book/10.1007/978-1-4302-6482-8</a></p>
<p style="padding-left: 30px;">2. Practical Flutter (2019)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4972-7">https://link.springer.com/book/10.1007/978-1-4842-4972-7</a></p>
<p style="padding-left: 30px;">3. 登入 @gm Email 帳號後, <a href="https://drive.google.com/file/d/1tGZhw-UZLTiuyonuTVWr1MPLljMynUHk/view?usp=sharing">下載計算機程式課程參考書</a></p>
<h4>達成學期教育目標之評量方式與標準:</h4>
<p>評分比例:</p>
<p style="padding-left: 30px;">學員出席 (10%)</p>
<p style="padding-left: 30px;">Github 倉儲與網站管理  (30%)</p>
<p style="padding-left: 30px;">任務執行 (30%)</p>
<p style="padding-left: 60px;">亂數分組與應用</p>
<p style="padding-left: 60px;">靜態繪圖與應用</p>
<p style="padding-left: 60px;"><span>動態繪圖與應用</span></p>
<p style="padding-left: 30px;">程式開發 (30%)</p>
<p>評分方式:</p>
<p style="padding-left: 30px;">計算機程式每週自評與互評表單:<span> <a href="https://forms.gle/hztfjHLkrAaLyntv6">https://forms.gle/hztfjHLkrAaLyntv6</a></span></p>
<p style="padding-left: 30px;">學員自我評量<span> (30%)</span></p>
<p style="padding-left: 30px;">分組自我評量 (30%)</p>
<p style="padding-left: 30px;">倉儲歷程查驗 (40%)</p>
<p>教學方式:</p>
<p style="padding-left: 30px;">課堂講授</p>
<p style="padding-left: 30px;">操作錄影</p>
<p style="padding-left: 30px;">學員實習</p>
<p style="padding-left: 30px;">分組報告</p>
<h2>QandA</h2>
<p>與計算機程式課程有關的問題, 請在 <a href="https://github.com/mdecourse/cp2019/issues/4">https://github.com/mdecourse/cp2019/issues/4</a> 中提出.</p>
<p>在校區內所使用的電腦, 可以透過 <a href="https://software.nfu.edu.tw/">https://software.nfu.edu.tw/</a> 取得各項教育版軟體, 其中包括 Windows 操作系統與 MS Office 以及 AutoDesk 教育版相關套件.</p>
<p>當使用者位於校區外, 希望連線使用校區內的相關電腦資料, 包括下載教育版軟體或使用各項電子期刊或電子書, 可以利用 <a href="https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn">https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn</a> 連線後使用.</p>
<h2>USB 隨身碟</h2>
<p>本課程建議使用隨身碟儲存所有與課程相關的倉儲或網頁資料, 也可只將與個人設定相關及倉儲存放在 USB 隨身碟中.</p>
<p>注意: 將資料存入 USB 隨身碟之前, 務必檢查所使用格式化的規格, 一般出廠 USB 格式化仍採用 <a href="https://zh.wikipedia.org/wiki/FAT">FAT32</a> 格式, 之後將無法存放大於 4GB 的檔案, 因此建議使用之前將 USB 隨身碟格式化為<a href="https://zh.wikipedia.org/wiki/ExFAT"> exFAT</a> 格式.</p>
<h4>USB 存放整個可攜系統</h4>
<p>優點:</p>
<p style="padding-left: 30px;">可以自行配置安裝系統中的模組</p>
<p>缺點:</p>
<p style="padding-left: 30px;">執行速度比硬碟慢</p>
<h4>USB 只存放設定與自我倉儲</h4>
<p>優點:</p>
<p style="padding-left: 30px;">執行速度較全部存入 USB 快</p>
<p>缺點:</p>
<p style="padding-left: 30px;">其他用戶對硬碟系統資料更動後, 使用上會受影響.</p>
<h4>全部使用隨身碟內容啟動的 start.bat 批次檔案:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_mdecourse
set HomeDrive=%Disk%:\home_mdecourse
set Home=%Disk%:\home_mdecourse
set USERPROFILE=%Disk%:\home_mdecourse

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\py373\DLLs;%Disk%:\py373\Lib;%Disk%:\py373\Lib\site-packages;
set PYTHONHOME=%Disk%:\py373

REM for flutter
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_mdecourse
set GRADLE_USER_home=%Disk%:\home_mdecourse
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set PUB_CACHE=%Disk%:\home_mdecourse\pub

REM set _JAVA_OPTIONS=-Duser.home=%HOME%
set path_flutter=%Disk%:\android\sdk\tools;%Disk%:\android\sdk\tools\bin;%Disk%:\android\sdk\platform-tools;%Disk%:\flutter\bin;%Disk%:\flutter\bin\cache\dart-sdk\bin;

set path_python=%Disk%:\py373;%Disk%:\py373\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM coreutils is for compiling fossil scm
set path_coreutils=%Disk%:\coreutils-5.3.0\bin;%Disk%:\depends22_x64;
set path_tcc=%Disk%:\tcc;
set path_cmake=%Disk%:\cmake-3.10.1-win64-x64\bin;
set path_nodejs=%Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;
set path_git=%Disk%:\portablegit\bin;
set path_xming=%Disk%:\Xming;
set path_latex=%Disk%:\Pandoc;%Disk%:\TinyTeX\bin\win32;
set path_vscode=%Disk%:\vscode;

path=%path%;%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;%path_flutter%;%path_vscode%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wscite415\wscite\SciTE.exe
start /MIN %Disk%:\wscite415\wscite\SciTE.exe


Exit</pre>
<h4>只存放設定與自我倉儲的  start.bat 批次檔案:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

REM 設定所使用的硬碟目錄
set CDisk=G:\201906_fall\data
set DDisk=D:\flutter_portable_final\data

set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
set USERPROFILE=%Disk%:\home

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%CDisk%\py373\DLLs;%CDisk%\py373\Lib;%CDisk%\py373\Lib\site-packages;
set PYTHONHOME=%CDisk%\py373

REM for flutter
set java_home=%DDisk%\java\jdk8u222-b10
set ANDROID_SDK_home=%DDisk%\home
set GRADLE_USER_home=%DDisk%\home
set ANDROID_SDK_ROOT=%DDisk%\android\sdk
set PUB_CACHE=%Disk%\home\pub

REM set _JAVA_OPTIONS=-Duser.home=%HOME%
REM %DDisk%\home\pub\bin is for webdev
set path_flutter=%DDisk%\android\sdk\tools;%DDisk%\android\sdk\tools\bin;%DDisk%\android\sdk\platform-tools;%DDisk%\flutter\bin;%DDisk%\flutter\bin\cache\dart-sdk\bin;%Disk%\home\pub\bin;

set path_python=%CDisk%\py373;%CDisk%\py373\Scripts;
set path_msys2=%CDisk%\msys64\mingw64\bin;
REM coreutils is for compiling fossil scm
set path_coreutils=%CDisk%\coreutils-5.3.0\bin;%CDisk%\depends22_x64;
set path_tcc=%CDisk%\tcc;
set path_cmake=%CDisk%\cmake-3.10.1-win64-x64\bin;
set path_nodejs=%CDisk%\nodejs;%CDisk%\nodejs\appdata\roaming\npm;
set path_git=%CDisk%\portablegit\bin;
set path_xming=%CDisk%\Xming;
set path_latex=%CDisk%\Pandoc;%CDisk%\TinyTeX\bin\win32;
set path_vscode=%DDisk%\vscode;

path=%path%;%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;%path_flutter%;%path_vscode%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %CDisk%\wscite415\wscite\SciTE.exe
start /MIN %CDisk%\wscite415\wscite\SciTE.exe


Exit</pre>
<h4>stop.bat 批次檔案:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM node.exe /F
taskkill /IM Range.exe /F
taskkill /IM SciTE.exe /F
taskkill /IM adb.exe /F
taskkill /IM code.exe /F
taskkill /IM java.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
EXIT</pre>
<p>請注意:</p>
<p>因為開啟 code 後所需先前的相關 Flutter 專案, 會將與 Android 相關, 取得的 package 放在 PUB_CACHE (即 y:\home\pub), 以及  .android (即 y:\home\.android) 目錄中, 因此搬遷資料時必須同時複製此一目錄內容.</p>
<p>而且需要建立 y:\home\AppData\Roaming 目錄, 以便存放 vscode 啟動後的 logs 檔案.</p>
<h2>課程筆記</h2>
<h4>利用倉儲與網頁紀錄筆記</h4>
<p>優點:</p>
<p style="padding-left: 30px;">快速方便且能引入大量線上靜態與動態影片資料</p>
<p>缺點:</p>
<p style="padding-left: 30px;">必須要透過歷程資料才能看出資料紀載順序</p>
<p style="padding-left: 30px;">若電腦無法開機或網路無法使用時, 將無法查閱相關資料</p>
<h4>利用紙本筆記</h4>
<p>優點:</p>
<p style="padding-left: 30px;">手寫將資料謄入紙本時, 可以加強對資料的記憶</p>
<p style="padding-left: 30px;">可以按照順序紀載歷程資料</p>
<p>缺點:</p>
<p style="padding-left: 30px;">必須隨身攜帶筆記本</p>
<p style="padding-left: 30px;">比較難以放入網路上的各項連結資料</p>
<h1>課程簡介</h1>
<p>說明課程進行方式, 評分方式與課程目標</p>
<p>課程進行方式 - 每週講解與示範, 並錄下基本操作影片素材, 週四上機與助教時間, 分組建立帶有字幕的教學影片, 各組員與小組每週維護倉儲與網站內容.</p>
<p>評分方式 - 利用線上表單, 學員每週進行自評與互評, 教師根據各組員與小組所完成的教學影片, 倉儲維護歷程與網站內容進行評分, 依照上述三種成績與相關流程計算各學員期中與期末成績.</p>
<p>課程目標 - 學員可利用 Git 與 Github 進行分組協同, 獨立維護網站, 利用帶有字幕的教學影片與網頁內容進行工程表達, 學習如何利用電腦、網路與程式執行協同機械產品設計分析與開發.</p>
<p>附註:</p>
<p>因機械設計產品開發之異地協同設計需求, 而衍生出對於建立 USB 可攜程式隨身碟之必要.</p>
<p>因同步分散式程式開發之模式, 而衍生出對於分散式版次管理系統之需求.</p>
<p>因追求最佳化機械設計流程開發, 而衍生出利用程式及網路進行工程分析之需求.</p>
<p>因為透過帶字幕的教學影片製作, 可證明對於特定計算機程式主題的了解程度, 並藉由網站簡報資料的建立與發布, 可提高各學員相互學習的成效.</p>
<h1>亂數分組</h1>
<p>流程圖符號</p>
<p><img alt="" height="550" src="/images/flowchart_symbols.png" width="ˋ400"/></p>
<p>上課第一週即進行學員亂數分組, 計算機程式的實際應用與程式對應語法的介紹, 將從此一程式的開發啟動</p>
<p>基本流程:</p>
<p>取得各班修課程成員的學號資料</p>
<p>決定每組幾人</p>
<p>將學員學號資料的次序弄亂</p>
<p>依據每組幾人, 從頭開始分組, 以確定各組成員</p>
<p>若最後一組人數過少, 將分別依序捕到前述已經分組的組別中</p>
<p>在課程加退選階段結束後, 各組再清算所餘人數是否得當, 不排除重新分組</p>
<p>各班檢討是否整個學期只分組一次, 或分組兩次, 或更多次的優缺點, 依據討論結果進行後續課程任務分組</p>
<h4>為何使用 Python?</h4>
<p>If you do much work on computers, eventually you find that there’s some task you’d like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI application, or a simple game.</p>
<p>If you’re a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow.</p>
<p>Perhaps you’re writing a test suite for such a library and find writing the testing code a tedious task. Or maybe you’ve written a program that could use an extension language, and you don’t want to design and implement a whole new language for your application.</p>
<p>Python is just the language for you.</p>
<p>首先我們將採用 Python 進行亂數分組, 各分組也可以研究看看, 假如採用 C, C++, Java, Javascript, Lua 或 Dart 進行類似的工作, 該如何進行?</p>
<p>是直接在命令列中執行, 寫一個配合的 GUI, 在網頁介面中執行, 或者在手機或平板上執行? 各有何種應用情境? </p>
<h4>近端資料讀取亂數分組程式</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random
filename = 'cdaw1_student_list.txt'
# 每組人數
num_in_one_group = 8
# 組序由 1 開始
group = 1
# 各班分組後所得數列
c2019 = []
with open(filename) as f:
    # 讀進全部檔案, 轉進數列, 並同時將各行的 \n 去除
    read_data = f.read().splitlines() 
print("共有 " + str(len(read_data)) + " 位學員")
# 利用 shuffle 將數列隨機弄亂
random.shuffle(read_data)
for i in range(len(read_data)):
    # 利用整數相除的餘數進行分組
    if i%num_in_one_group == 0:
        # 列出分隔符號
        print("-"*20)
        print("group " + str(group) +":")
        # 在分組區隔時重置各組學員數列
        group_list = []
        print()
        # 同時列出與分隔標註對應 i 的數列內容
        print(read_data[i])
        group_list.append(read_data[i])
        group = group + 1
    else:
        # 逐一列出同組的其他學員
        print(read_data[i])
        group_list.append(read_data[i])
    if i%num_in_one_group == 0:
        c2019.append(group_list)
# c2019 為該班分組後所得分組數列
print(c2019)</pre>
<h4>從網站讀取資料亂數分組程式</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random
import urllib3

target_url = "https://raw.githubusercontent.com/mdecourse/cd2019/gh-pages/data/cda/cdaw1_student_list.txt"

# 從 url 讀取資料, 之後利用 splitlines() 存入學員學號字串數列中
http = urllib3.PoolManager()
response = http.request('GET', target_url)
data = response.data.decode('utf-8')
read_data = data.splitlines() 
#print(read_data)

# 每組人數
num_in_one_group = 10
# 組序由 1 開始
group = 1
# 各班分組後所得數列
c2019 = []
print("共有 " + str(len(read_data)) + " 位學員")
# 利用 shuffle 將數列隨機弄亂
random.shuffle(read_data)
for i in range(len(read_data)):
    # 利用整數相除的餘數進行分組
    if i%num_in_one_group == 0:
        # 列出分隔符號
        print("-"*20)
        print("group " + str(group) +":")
        # 在分組區隔時重置各組學員數列
        group_list = []
        print()
        # 同時列出與分隔標註對應 i 的數列內容
        print(read_data[i])
        group_list.append(read_data[i])
        group = group + 1
    else:
        # 逐一列出同組的其他學員
        print(read_data[i])
        group_list.append(read_data[i])
    if i%num_in_one_group == 0:
        c2019.append(group_list)
# c2019 為該班分組後所得分組數列
print(c2019)</pre>
<p>為何使用 Dart?</p>
<p>因為 Dart 是具有潛力, 而且能夠適應未來可攜裝置與 IOTs 整合環境變化應用的程式語言.</p>
<p>使用 Dart 執行亂數分組:</p>
<p><a href="https://dartpad.dev/embed-dart.html?id=9f69e77cb456b97cccc8eb5a9dbd991c">https://dartpad.dev/embed-dart.html?id=9f69e77cb456b97cccc8eb5a9dbd991c</a></p>
<p>結合 <a href="https://gist.github.com/mdecourse/9f69e77cb456b97cccc8eb5a9dbd991c">gist</a> 與 <a href="https://github.com/dart-lang/dart-pad/wiki/Embedding-Guide">dartpad.dev</a>, 也可以從 <a href="https://mde.tw/dartpad/">https://mde.tw/dartpad/</a> 右上方 Samples 選擇亂數分組程式執行.</p>
<h1>github 帳號</h1>
<p>建立 cp2019 倉儲及對應的 CMSiMDE Github Pages 網頁</p>
<p>了解基本的 Git 指令與 Github 系統的應用之後, 產生出對 GitExtensions 工具的需求, 也產生出對於透過 SSH keys 提交倉儲版本的需求, 以簡化改版流程.</p>
<p><a href="https://2019wcm.blogspot.com/search/label/GitExtensions" rel="nofollow">https://2019wcm.blogspot.com/search/label/GitExtensions</a></p>
<p><a href="https://2019wcm.blogspot.com/search/label/ssh" rel="nofollow">https://2019wcm.blogspot.com/search/label/ssh</a></p>
<p>申請 Github 帳號</p>
<p>登入 @gm 電子郵箱, 然後以學號申請 Github 帳號, 待驗證所使用的學號@gm 電子郵箱後, 即可建立 cp2019 倉儲, 特別注意新增 public repository 時, 可啟用 README.md, 隨即可以在近端以</p>
<p>git clone <a href="https://github.com/學號/cp2019.git">https://github.com/學號/cp2019.git</a></p>
<p>將遠端 Github 倉儲中的資料, clonr 至 y:\tmp 目錄的 cp2019 目錄中.</p>
<p>clone 後的 cp2019 目錄有 .git 目錄, 存放該倉儲的設定與版本資料, 以及 README.md 檔案.</p>
<p>在 .git 目錄中, 與使用者相關的是 config</p>
<h4>以子模組方式納入 CMSiMDE</h4>
<p>利用 git submodule add 納入 CMSiMDE 網際內容管理系統的程式碼</p>
<p>https://github.com/mdecourse/cmsimde</p>
<p>利用命令列視窗, 更換目錄至 y:\tmp\cp2019 之後, 執行</p>
<p>git submodule add https://github.com/mdecourse/cmsimde.git cmsimde</p>
<p>意即, 在此目錄中, 將 https://github.com/mdecourse/cmsimde.git 倉儲資料納為近端 cmsimde 目錄的內容, 且作為 submodule, 也就是設定一個倉儲的子模組, 並將此子模組與 https://github.com/mdecourse/cmsimde.git 倉儲目前的最新版本內容.</p>
<p>將子模組中 up_dir 目錄中的內容往前搬一個目錄</p>
<p>在 y:\tmp\cp2019\cmsimde 目錄中, 以</p>
<p>python wsgi.py</p>
<p>就可以啟動近端的動態網際內容管理系統, 作為近端改版之用, 可以瀏覽器中的 https://localhost:9443 連接所啟用的 CMS (Content Management System).</p>
<p>並以 admin 管理者密碼登入.</p>
<p>進入 config 修改網頁標題, 並且修改倉儲中的 init.py, 修改 site_title</p>
<p>改版後要推送資料前, 可以利用 generate_pages 將內容轉為動態網頁後, 可以利用 SciTE 開啟倉儲中的 http-server.py 檔案後以 Tools -&gt; Go 執行, 可以在瀏覽器中以 <a href="https://localhost:8444">https://localhost:8444</a> 檢查近端的靜態網頁內容, 確定無誤後. 則必須再退回 y:\tmp\cp2019 目錄之後, 必須完成 git config 的 user.name 與 user.email 之後, 可以利用:</p>
<p>git add .<br/>git commit -m "提交說明"<br/>git push</p>
<h4>以 SSH 對 cp2019 倉儲進行改版</h4>
<p>如何產生所需的 keys, 放在哪裡, public key 要送到哪裡, 設定如何寫, 在 http 模式下, 代理主機如何執行設定, 在 ssh 模式下, 代理主機要如何設定? 若近端啟動後使用超過一個 github 帳號身分, 又如何設定 http 與 ssh 模式下的倉儲改版與提交?</p>
<h4>如何 git clone 帶有子模組的倉儲</h4>
<p style="padding-left: 30px;"><a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E7%B5%84-Submodules">git submodule 使用說明</a></p>
<p>當在近端 git clone 帶有子模組的倉儲時, 首先:</p>
<p style="padding-left: 30px;">git clone 倉儲_URL.git 近端倉儲名稱</p>
<p>之後, 以 git submodule init 啟始子模組, 接著以 git submodule update 下載所對應版本的子模組內容.</p>
<p>假如倉儲中所使用的 submodule 已經改版, 希望將先前所引用的版本升級至最新版本 (例如: master 分支內容), 可以進入該子模組所在目錄, 然後執行:</p>
<p style="padding-left: 30px;">git pull origin master</p>
<h4>為何倉儲中要引用子模組?</h4>
<p style="padding-left: 30px;">子模組架構的設計與引用, 可以讓子模組的開發者根據需求隨時改版, 而引用者只需要確立所引用的子模組版次號, 即可在原始引用組態 (組成內容與狀態) 下正確協同工作.</p>
<p style="padding-left: 30px;">在機械設計流程, 想像所有系統與元件都是虛擬物件, 與 github 中的倉儲程式碼類似.</p>
<p style="padding-left: 30px;">當導入一只特殊規格的電動馬達後, 配合減速機與機構執行所需工作, 若將該馬達當成 git 的子模組, 負責研發此電動馬達的團隊, 可以不斷根據新技術的導入或修正先前的設計, 所產生新的馬達版本, 不會影響使用舊馬達版本的用戶. (請注意, 引入子模組之後的倉儲, 在其 .git 目錄中的 config 與倉儲目錄中的 .gitmodules 都註記所引用的子模組來源.)</p>
<p style="padding-left: 30px;">這時引用該馬達的機械設計模擬系統, 在不變更使用該馬達元件版本的情況下, 原始設計可以繼續出貨, 若需配合該馬達的新功能而修改其他設計之後, 只需要執行 git submodule update, 就可以取得該馬達的最新型功能, 產生最新版的機械設計內容. </p>
<h4>各組利用 Python 程式模組, 練習建立並使用 git 子模組.</h4>
<h2>Github Guide</h2>
<p><a href="https://guides.github.com/">https://guides.github.com/</a></p>
<p><a href="https://guides.github.com/activities/hello-world/">https://guides.github.com/activities/hello-world/</a></p>
<h1>示範專案</h1>
<h4>計算機程式能夠解決甚麼問題?</h4>
<p>首先必須確立運用計算機程式的重要關鍵, 取決於領域知識 (Domain Knowledge) 範圍內所要解決的問題. </p>
<p>學習計算機程式的目的, 在於透過與電腦的溝通, 然後逐一解決各專業領域中所碰到的問題.</p>
<p>因此, 在學習如何寫程式的過程, 必須經歷以下過程:</p>
<p style="padding-left: 30px;">如何與電腦溝通? - 了解電腦如何運作, 網路如何連接, 程式系統如何搭建?</p>
<p style="padding-left: 30px;">要解決甚麼問題? - 學習如何定義問題, 透過對問題的瞭解, 逐步尋求解決方法.</p>
<p style="padding-left: 30px;">如何利用電腦程式解決這個問題? - 解決同一問題的方法不只一種, 所有解決方案都必須設法持續改進.</p>
<p>Python: 一般運算與資料處理應用, 網際內容管理, GUI for 電腦輔助機械設計工程分析</p>
<p>ANSI C: 建立 Fossil SCM</p>
<p>C++: Solvespace 與 Pyslvs 平面機構合成與分析內之幾何運算核心</p>
<p>Dart: 配合 Flutter SDK 開發手機應用程式</p>
<p>手機程式作為介面 &lt;-&gt; Python Flask 作為 Server 端程式負責與其他 C/C++/Python 核心執行運算</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Function_as_a_service">https://en.wikipedia.org/wiki/Function_as_a_service</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Serverless_computing">https://en.wikipedia.org/wiki/Serverless_computing</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/yakka/dart-is-ready-for-faas-with-cloud-run-fb069abb3176">https://medium.com/yakka/dart-is-ready-for-faas-with-cloud-run-fb069abb3176</a></p><h2>Python</h2>
<p><a href="/downloads/python3.7.2_tutorial.pdf">python 3.7.2 tutorial.pdf</a></p>
<p><a href="https://rd.springer.com/content/pdf/10.1007%2F978-3-030-20290-3.pdf">Begineers Guide to Python 3 Programming.pdf</a></p>
<p><a href="https://rd.springer.com/content/pdf/10.1007%2F978-3-030-18873-3.pdf">The Python Workbook.pdf</a></p>
<p>亂數分組與 CMSiMDE</p>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VjUBzMWyIHQ" width="560"></iframe></p>
<p>課程評分程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績
'''

def diff(自評分數, 互評得分):
    return abs(自評分數 - 互評得分)
    
def max(自評分數, 互評得分):
    if 自評分數 &gt; 互評得分:
        return 自評分數
    else:
        return 互評得分

def 分組比分(自評分數, 互評得分):
    if diff(自評分數, 互評得分) &lt; 5:
        學員得分 = max(自評分數, 互評得分)
    else:
        學員得分 = 互評得分 - diff(自評分數, 互評得分)
    return 學員得分
    
def 全班比分(學員得分, 教師評分):
    if diff(學員得分, 教師評分) &lt; 5:
        學員成績 = max(學員得分, 教師評分)
    else:
        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4
    return 學員成績

def 學員成績(自評分數, 互評得分, 教師評分):
    學員分組得分 = 分組比分(自評分數, 互評得分)
    學員課程成績 = 全班比分(學員分組得分, 教師評分)
    return 學員課程成績
    
print(學員成績(80, 70, 60))
print(學員成績(60, 70, 80))</pre>
<p></p>
<h2>Flutter</h2>
<p style="padding-left: 30px;"><a href="https://flutter.dev/docs">https://flutter.dev/docs</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/flutter/flutter/projects">https://github.com/flutter/flutter/projects</a></p>
<p style="padding-left: 30px;"><a href="https://flutterchina.club/docs/">https://flutterchina.club/docs/</a></p>
<p style="padding-left: 30px;">Flutter 實戰: <a href="https://book.flutterchina.club/">https://book.flutterchina.club/</a> (<a href="https://github.com/flutterchina/flutter-in-action">Github</a>)</p>
<p>Flutter 與 Web 架構:</p>
<p style="padding-left: 30px;"><a href="https://medium.com/flutter/hummingbird-building-flutter-for-the-web-e687c2a023a8">https://medium.com/flutter/hummingbird-building-flutter-for-the-web-e687c2a023a8</a></p>
<p>Flutter 升級:</p>
<p style="padding-left: 30px;">flutter upgrade</p>
<p>Flutter 移除 analytics:</p>
<p style="padding-left: 30px;">flutter config --no-analytics</p>
<p>Flutter Tutorial:</p>
<p style="padding-left: 30px;"><a href="https://github.com/FilledStacks/flutter-tutorials">https://github.com/FilledStacks/flutter-tutorials</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/CarGuo/GSYGithubAppFlutter">https://github.com/CarGuo/GSYGithubAppFlutter</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/trending/dart">https://github.com/trending/dart</a></p>
<p>第一步:</p>
<p style="padding-left: 30px;">在校園網路或以 VPN 或設定代理主機, 下載 <a href="https://link.springer.com/book/10.1007/978-1-4842-4972-7">2019 Pratical Flutter 電子書</a>.</p>
<p style="padding-left: 30px;">登入 @gm 電子郵箱後, 下載可放入 USB 隨身碟運作的可攜系統:</p>
<p style="padding-left: 60px;"> <a href="https://drive.google.com/file/d/1_Mfw1U8yUkYGlVcoFzpvijtRFdKgP93U/view?usp=sharing">flutter_portable_final.7z</a></p>
<p>第二步:</p>
<p style="padding-left: 30px;">解開 flutter_portable_final.7z, 並在執行手機程式開發的 Windows 10 64 位元電腦上安裝 <a href="https://www.bluestacks.com/">https://www.bluestacks.com</a> (也可以安裝 ref 目錄中的 Bluestacks 4.0 舊版本)</p>
<p style="padding-left: 30px;">之後, 我們可以直接啟動  Flutter 隨身系統後, 利用電腦上的 Bluestacks 執行手機程式.</p>
<p>第三步:</p>
<p style="padding-left: 30px;">啟動 Flutter 可攜系統後, 可以直接在命令列中輸入 code, 啟動 Visual Studio Code 程式編輯系統.</p>
<p>第四步:</p>
<p style="padding-left: 30px;">執行第二步在操作系統中所安裝的 Bluestacks, 開啟後, 在命令列中以 adb connect localhost:5555, 以便之後將 Visual Studio Code 中的 Flutter 程式結果呈現在 Bluestacks 虛擬手機畫面中.</p>
<p style="padding-left: 30px;">由於 Bluestacks 採用與 Virualbox 相同的虛擬主機模式, 適合在 CPU 等級較低的電腦上執行開發, 也可以在 Visual Studio Code 中按下 Ctrl + Shift + P, 然後輸入 flutter, 除了可以新建 Flutter 專案外, 也可以透過 Android Virtual Devices 指令, 建立 emulator, 並將編譯完成的手機程式結果, 呈現在對應的 emulator 中.</p>
<p style="padding-left: 30px;">當然, 若使用者已經安裝並設置<a href="https://developer.android.com/studio/run/win-usb">https://developer.android.com/studio/run/win-usb</a>, 也可以直接利用 USB 連接實體 Android 手機進行程式開發測試.</p>
<h4>參考資料</h4>
<p style="padding-left: 30px;"><a href="https://flutterbyexample.com/">https://flutterbyexample.com/</a></p>
<p style="padding-left: 30px;"><a href="https://proandroiddev.com/mythbuster-10-rumors-about-flutter-why-its-not-worse-than-android-kotlin-f1a1acbe587d">https://proandroiddev.com/mythbuster-10-rumors-about-flutter-why-its-not-worse-than-android-kotlin-f1a1acbe587d</a></p>
<h4>專案範例</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/flutter-community/flutter-firebase-realtime-database-crud-operations-using-provider-c242a01f6a10">https://medium.com/flutter-community/flutter-firebase-realtime-database-crud-operations-using-provider-c242a01f6a10</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/flutter-ui-challenges/flutter_web_challenge_googlemaps">https://github.com/flutter-ui-challenges/flutter_web_challenge_googlemaps</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/flutter-community/writing-a-flutter-data-entry-form-app-for-a-rental-agency-e5a7dab20596">https://medium.com/flutter-community/writing-a-flutter-data-entry-form-app-for-a-rental-agency-e5a7dab20596</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/flutter-community/using-svg-in-flutter-3dcf7b1dd713">https://medium.com/flutter-community/using-svg-in-flutter-3dcf7b1dd713</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b">https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/wiltonribeiro/grocery_shop_flutter">https://github.com/wiltonribeiro/grocery_shop_flutter</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/tBzJOb2Dopg" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-QRQIKtPTlI" width="560"></iframe></p>
<h4>pubspec.yaml 中的支援版次表示法:</h4>
<p><a href="https://stackoverflow.com/questions/53563079/what-is-the-caret-sign-before-the-dependency-version-number-in-flutters-pub">https://stackoverflow.com/questions/53563079/what-is-the-caret-sign-before-the-dependency-version-number-in-flutters-pub</a></p>
<h4>Flutter Web</h4>
<p>利用 Flutter 建立網際前端程式: </p>
<p style="padding-left: 30px;"><a href="https://github.com/flutter/flutter_web">https://github.com/flutter/flutter_web</a></p>
<p>必須確認 Y:\\home\pub\bin 已經納入指令搜尋路徑中, 因為 webdev.bat 存放在此目錄, Flutter Web 將 dart 轉為 Javascript 時需要執行 webdev build 轉換指令, 將網際系統放入 build 目錄中.</p>
<p>webdev.bat 的啟動透過執行:</p>
<p style="padding-left: 30px;"><span>flutter packages pub global activate webdev</span></p>
<p><span>以 code 指令啟動隨身系統中的 Visual Studio Code, 然後以 Ctrl + Shift + P 帶出 Flutter: New Web Project, 點選後建立新的 Flutter Web 專案.</span></p>
<p><span>根據</span></p>
<p style="padding-left: 30px;"><a href="https://github.com/flutter/samples">https://github.com/flutter/samples</a> 目錄中的 web 範例進行練習</p>
<p>完成後, 進入專案目錄, 以 webdev serve 進行測試, 以 webdev build 轉出專案網際內容.</p>
<p>Flutter Web 範例:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/vision_challenge">https://github.com/mdecourse/vision_challenge</a> (將每次改版 build 的內容複製到 Github Pages 對應的 docs 目錄中)</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/vision_challenge">http://mde.tw/vision_challenge</a> </p>
<p></p><h3>Dart</h3>
<p><a href="https://dart.dev/guides/language/language-tour">https://dart.dev/guides/language/language-tour</a></p>
<p><a href="https://renato.athaydes.com/posts/interesting-dart-features.html">https://renato.athaydes.com/posts/interesting-dart-features.html</a> (<a href="/downloads/interesting_dart_features.pdf">pdf</a>)</p>
<p><a href="https://www.raywenderlich.com/4482551-dart-basics">https://www.raywenderlich.com/4482551-dart-basics</a></p>
<p><a href="https://github.com/smartherd/DartTutorial">https://github.com/smartherd/DartTutorial</a></p>
<p><a href="http://jpryan.me/dartbyexample/">http://jpryan.me/dartbyexample/</a> (<a href="https://github.com/johnpryan/dartbyexample">Github</a>)</p>
<p><a href="/downloads/Dart2-Cheatsheet.pdf">Dart2-Cheatsheet.pdf</a></p>
<p><a href="https://translate.google.com.tw/translate?hl=zh-TW&amp;sl=ja&amp;tl=en&amp;u=https%3A%2F%2Fwww.cresc.co.jp%2Ftech%2Fjava%2FGoogle_Dart2%2Flanguage%2Foverview%2Foverview.html">Dart2 Overview</a></p>
<p><a href="https://translate.google.com.tw/translate?hl=zh-TW&amp;sl=ja&amp;tl=en&amp;u=https%3A%2F%2Fwww.cresc.co.jp%2Ftech%2Fjava%2FGoogle_Dart2%2Fintroduction%2Fmain_page.html">Dart2 Language Basics</a></p>
<p><a href="https://medium.com/learn-dart/how-i-learn-dart-and-flutter-ee8948cf58a5">https://medium.com/learn-dart/how-i-learn-dart-and-flutter-ee8948cf58a5</a></p>
<p><a href="https://www.reddit.com/r/dartlang/">https://www.reddit.com/r/dartlang/</a></p>
<p style="padding-left: 30px;">"Dart 2 was a huge upgrade to the Dart platform. It completed the transformation from our early web roots to a mainstream programming language suitable for fast development of rich user experiences across mobile and web. Dart is somewhat unique as a language in offering both a virtual machine (VM) and compilation to both native machine code and JavaScript. This supports the differing needs of the various platforms, for both development and production."</p>
<p style="padding-left: 30px; text-align: right;">-- <a href="https://medium.com/dartlang/announcing-dart-2-1-improved-performance-usability-9f55fca6f31a">Landing Dart 2</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/h6z-5d-OlcQ" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/huawCRlo9H4" width="560"></iframe></p>
<p style="padding-left: 30px;"><a href="/downloads/Beginning Programming with Dart.pdf">Beginning Programming with Dart.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://dart.dev/guides/language">https://dart.dev/guides/language</a></p>
<p style="padding-left: 30px;"><a href="https://dart.dev/tools/sdk/archive">https://dart.dev/tools/sdk/archive</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/dart-lang/sdk">https://github.com/dart-lang/sdk</a></p>
<p style="padding-left: 30px;"><a href="https://pub.dev/packages/stagehand">https://pub.dev/packages/stagehand</a></p>
<h4>Dart News and Update:</h4>
<p style="padding-left: 30px;"><a href="https://news.dartlang.org/">https://news.dartlang.org/</a></p>
<h4>Dart Packages</h4>
<p style="padding-left: 30px;"><a href="https://pub.dev/">https://pub.dev/</a></p>
<h4>Dart Mixins</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/flutter-community/dart-what-are-mixins-3a72344011f3">https://medium.com/flutter-community/dart-what-are-mixins-3a72344011f3</a></p>
<h4>安裝 Dart SDK</h4>
<p style="padding-left: 30px;"><a href="https://dart.dev/get-dart">https://dart.dev/get-dart</a></p>
<p style="padding-left: 30px;"><a href="https://storage.googleapis.com/dart-archive/channels/stable/release/2.4.1/sdk/dartsdk-windows-x64-release.zip">https://storage.googleapis.com/dart-archive/channels/stable/release/2.4.1/sdk/dartsdk-windows-x64-release.zip</a></p>
<h4>Effective Dart</h4>
<p style="padding-left: 30px;"><a href="https://dart.dev/guides/language/effective-dart">https://dart.dev/guides/language/effective-dart</a></p>
<h4>async and await</h4>
<p style="padding-left: 30px;"><a href="https://dart.dev/codelabs/async-await">https://dart.dev/codelabs/async-await</a></p>
<h4>Dart FFI</h4>
<p style="padding-left: 30px;"><a href="https://github.com/dart-lang/sdk/blob/master/samples/ffi/sqlite/docs/sqlite-tutorial.md">https://github.com/dart-lang/sdk/blob/master/samples/ffi/sqlite/docs/sqlite-tutorial.md</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mjohnsullivan/ffi">https://github.com/mjohnsullivan/ffi</a></p>
<h4>Dart Pad</h4>
<p style="padding-left: 30px;">embeded gist: <a href="https://gist.github.com/scrum-1/d83c705a831668f76d2a39b97c5cb1c9">https://gist.github.com/scrum-1/d83c705a831668f76d2a39b97c5cb1c9</a></p>
<p style="padding-left: 30px;"><a href="https://dartpad.dev/embed-html.html?id=d83c705a831668f76d2a39b97c5cb1c9">https://dartpad.dev/embed-html.html?id=d83c705a831668f76d2a39b97c5cb1c9</a></p>
<p style="padding-left: 30px;"><a href="https://webdev-angular3-dartlang-org.firebaseapp.com/tutorials/get-data/fetch-data">https://webdev-angular3-dartlang-org.firebaseapp.com/tutorials/get-data/fetch-data</a> </p>
<h4>Hello Dart</h4>
<p style="padding-left: 30px;"><a href="https://dartpad.dartlang.org/embed-inline.html?id=1a980b16e56b1d1781720bf7d1ffc691">https://dartpad.dartlang.org/embed-inline.html?id=1a980b16e56b1d1781720bf7d1ffc691</a></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">void main() {
  print("Hello, World!");
}</pre>
<p>另一個 Dart 範例</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">import "dart:math" as math;

class Point {
  // final 型別表示此變數只能設對應值一次, 即便在 runtime 期
  // num 型別表示此變數可以是 int 或 float 數值
  final num x, y;
  Point(this.x, this.y);
  Point.origin()
      : x = 0,
        y = 0;
  num distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return math.sqrt(dx * dx + dy * dy);
  }

  Point operator +(Point other) =&gt; Point(x + other.x, y + other.y);
}

void main() {
  var p1 = Point(10, 10);
  var p2 = Point.origin();
  var distance = p1.distanceTo(p2);
  print(distance);
}
</pre>
<h4>Dart Nullable Operator</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">// assign y to x, unless y is null, 
// otherwise assign z
x = y ?? z;

// assign y to x if x is null
x ??= y

// call foo() only if x is not null
x?.foo();</pre>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Mm7TPZHk_KU" width="560"></iframe></p>
<h4>Dart 程式語言</h4>
<p>資料來源:</p>
<p style="padding-left: 30px;"><a href="https://dart.dev/guides/language/language-tour">https://dart.dev/guides/language/language-tour</a></p>
<p style="padding-left: 30px;"><a href="https://da-bootcamp.firebaseapp.com/?course=start_programming_dart">https://da-bootcamp.firebaseapp.com/?course=start_programming_dart</a> </p>
<p>每一個 Dart 程式都以小寫英文字母的 main() 主函式開始執行, 計算機程式語法中的函式與數學中的函式相同, 可以從 () 小括號中間接受輸入, 也可以產生輸出, 小括號中間空白, 表示這個函式沒有輸入的設計, 而 main 之前的 void 表示目前的函式也沒有輸出的設計.</p>
<p>Dart 程式的執行範圍區隔與 C/C++ 等程式語法相同, 利用大括號 {} 來界定該函式的有效範圍 (註: Python 程式語法則是採用縮排, 以每四個空白鍵為單位, 每一個縮排範圍內的程式碼界定為同一區).</p>
<p>在這個 Dart 程式中, void 是關鍵字, 而 main() 是主函式, 也是每一個 Dart 程式會首先執行的函示, 而 print() 是用來列印資料的核心函式 (core function), 在 print() 中作為輸入的 "Hello, World" 以雙引號界定的資料稱為字串 (string), 字串也可以用單引號界定.</p>
<p>main 與 print 並不屬於關鍵字, 可以當作變數名稱, 但並不建議使用.</p>
<p>關鍵字在程式語言的語法中稱為保留字, 具有特殊的用法與意義, 當使用者要命名變數時, 不可以使用該程式語言中所規定的關鍵字.</p>
<p>而 Dart 程式語法中的關鍵字共有以下 60 個:</p>
<h4>Keywords</h4>
<p>The following table lists the words that the Dart language treats specially.</p>
<table class="table table-striped nowrap">
<tbody>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#abstract-classes">abstract</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#important-concepts">dynamic</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#implicit-interfaces">implements</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#importing-only-part-of-a-library">show</a> <sup alt="contextual keyword" title="contextual keyword">1</sup></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#type-test-operators">as</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#if-and-else">else</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#using-libraries">import</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#class-variables-and-methods">static</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#assert">assert</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#enumerated-types">enum</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#for-loops">in</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#extending-a-class">super</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#asynchrony-support">async</a> <sup alt="contextual keyword" title="contextual keyword">1</sup></td>
<td><a href="https://dart.dev/guides/libraries/create-library-packages">export</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a class="external" href="https://stackoverflow.com/questions/28595501/was-the-interface-keyword-removed-from-dart">interface</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#switch-and-case">switch</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#asynchrony-support">await</a> <sup alt="limited reserved word" title="limited reserved word">3</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#extending-a-class">extends</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#type-test-operators">is</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#generators">sync</a> <sup alt="contextual keyword" title="contextual keyword">1</sup></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#break-and-continue">break</a></td>
<td><a class="external" href="https://stackoverflow.com/questions/24929659/what-does-external-mean-in-dart">external</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#libraries-and-visibility">library</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#constructors">this</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#switch-and-case">case</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#factory-constructors">factory</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#adding-features-to-a-class-mixins">mixin</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#throw">throw</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#catch">catch</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#booleans">false</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#using-constructors">new</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#booleans">true</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#instance-variables">class</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#final-and-const">final</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#default-value">null</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#catch">try</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#final-and-const">const</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#finally">finally</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#catch">on</a> <sup alt="contextual keyword" title="contextual keyword">1</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#typedefs">typedef</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#break-and-continue">continue</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#for-loops">for</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#overridable-operators">operator</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#variables">var</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/sound-problems#the-covariant-keyword">covariant</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#functions">Function</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/libraries/create-library-packages#organizing-a-library-package">part</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a class="external" href="https://medium.com/dartlang/dart-2-legacy-of-the-void-e7afb5f44df0">void</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#switch-and-case">default</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#getters-and-setters">get</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#catch">rethrow</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#while-and-do-while">while</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#lazily-loading-a-library">deferred</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#importing-only-part-of-a-library">hide</a> <sup alt="contextual keyword" title="contextual keyword">1</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#functions">return</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#adding-features-to-a-class-mixins">with</a></td>
</tr>
<tr>
<td><a href="https://dart.dev/guides/language/language-tour#while-and-do-while">do</a></td>
<td><a href="https://dart.dev/guides/language/language-tour#if-and-else">if</a></td>
<td><a class="external" href="https://api.dart.dev/stable/dart-core/Set-class.html">set</a> <sup alt="built-in-identifier" title="built-in-identifier">2</sup></td>
<td><a href="https://dart.dev/guides/language/language-tour#generators">yield</a> <sup alt="limited reserved word" title="limited reserved word">3</sup></td>
</tr>
</tbody>
</table>
<p>Avoid using these words as identifiers. However, if necessary, the keywords marked with superscripts can be identifiers:</p>
<ul>
<li>
<p>Words with the superscript<span> </span><strong>1</strong><span> </span>are<span> </span><strong>contextual keywords</strong>, which have meaning only in specific places. They’re valid identifiers everywhere.</p>
</li>
<li>
<p>Words with the superscript<span> </span><strong>2</strong><span> </span>are<span> </span><strong>built-in identifiers</strong>. To simplify the task of porting JavaScript code to Dart, these keywords are valid identifiers in most places, but they can’t be used as class or type names, or as import prefixes.</p>
</li>
<li>
<p>Words with the superscript<span> </span><strong>3</strong><span> </span>are newer, limited reserved words related to the<span> </span><a href="https://dart.dev/guides/language/language-tour#asynchrony-support">asynchrony support</a><span> </span>that was added after Dart’s 1.0 release. You can’t use<span> </span><code class="highlighter-rouge">await</code><span> </span>or<span> </span><code class="highlighter-rouge">yield</code><span> </span>as an identifier in any function body marked with<span> </span><code class="highlighter-rouge">async</code>,<span> </span><code class="highlighter-rouge">async*</code>, or<span> </span><code class="highlighter-rouge">sync*</code>.</p>
</li>
</ul>
<p>All other words in the table are<span> </span><strong>reserved words</strong>, which can’t be identifiers.</p>
<p>上述 Dart 程式段中的符號 ";" 表示該行至分號的位置為一個完整可執行段程式 (use a semicolon to tell the interpreter where your statement ends.), 這一點也與 C/C++ 程式語法相同,  (Python 程式則一般利用跳行來界定可執行段, 但也可以利用 ";" 來界定).</p>
<h4>程式註解</h4>
<p>Dart 程式語法支援三種註解方式:</p>
<p>    // 這是一般的單行註解</p>
<p>    /* 這是多行註解開始</p>
<p>        可以橫跨多行說明文字, 程式在執行時會忽略其中內容</p>
<p>    這是多行註解結束 */ </p>
<p>而第三種註解則用於產生程式的說明文件檔案:</p>
<p>    /// 這是單行的特殊的文件說明註解</p>
<p>    /** 這是多行的文件說明註解開始</p>
<p>        可以橫跨多行說明文字, 程式在執行時會忽略其中內容</p>
<p>    這是多行的文件註解結束 */ </p>
<h4>變數 (Variables)</h4>
<p>了解 Dart 程式的基本用法, 也知道那些英文字是被設計作為保留關鍵字後, 接下來就需要了解有關程式中有關變數的命名.</p>
<p>Variables are a basic building block of most modern programs. In short, a variable is an alias for a computer memory location, at which something of interest will be stored.</p>
<p>Whatever is stored there is said to be the variable's value. If you've studied the basics of algebra, you might remember variables mostly as single-letter stand-ins for numbers that helped you conceptualize and solve complex equations. Dart's variables are similar but not exactly the same, as they're capable of standing in for all kinds of values: numbers, strings of characters, or even more complex structures representing people, economic transactions, or geographic locations.</p>
<p>All declared variables in Dart are initially given the special value of null.</p>
<p>Unlike in algebra class, the = operator in Dart does not strictly represent equivalence. It's known as the assignment operator, so x = 5 is an expression instructing the computer to assign the value 5 to a memory location named x. </p>
<p><iframe height="315" src="https://dartpad.dartlang.org/embed-inline.html?id=1a980b16e56b1d1781720bf7d1ffc691" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8F2uemqLwvE" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/OLjyCy-7U2U" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/7onA7LeBD0o" width="560"></iframe></p>
<h4>型別 (Types)</h4>
<p>推斷型別 (Inferred Types)</p>
<p>Variables in Dart come in many different types. Some variables are meant to hold numbers, some characters, and some point to more complex values. When declaring variables, you can allow Dart to attempt to infer your variable's intended type or you can be explicit.</p>
<p>In the last lesson, you declared your variables using the var keyword (short for "variable"), like this:</p>
<p>    var x;</p>
<p>When you declare a variable using var, Dart tries to infer the variable's type. If you don't initialize the new variable with a value in the same statement as the declaration, Dart has nothing on which to base an inference, so the variable is considered to be of type dynamic. As a dynamic variable, x is able to accept values of any valid type.</p>
<p>Mixing it Up</p>
<p>In this example, the type of the variable called x is declared but not initialized with a value, and becomes dynamic, so code like this wouldn't be a problem:</p>
<p>    var x;<br/>    x = 5;<br/>    x = "Dart is great.";</p>
<p>The code declares x, then instructs Dart to store a value of 5 at the memory location aliased as x. That value is an integer, a whole number with no fractional part. The next line assigns the value "Dart is great.", a string of characters, to x. That's a versatile variable.</p>
<p>Disappearing Number Trick</p>
<p>Try out this code:</p>
<p>    void main() {<br/>        var x;<br/>        x = 5;<br/>        x = "Dart is great.";<br/>        print(x);<br/>    }</p>
<p>Can you predict what will be printed? If you run the code, you'll see that "Dart is great." appears in the console. What happened to the 5? After x was declared, it was assigned the value 5, but the next instruction assigned a string of characters to x, obliterating the numeric value. Since x is of type dynamic, the code analyzer does not flag the potential issue.</p>
<p>You Can't Do That</p>
<p>Modify the code to look like this:</p>
<p>    void main() {<br/>    var x = 5;<br/>    x = "Dart is great.";<br/>    print(x);<br/>    }</p>
<p>This code causes DartPad to display an error, saying that you're mixing types. Because you've initialized x with an integer number value at the same time you declared it, Dart infers that x is supposed to hold integers from that point on. Now x is of type int.</p>
<p>You can override Dart's inference by specifying that you want your variable to be dynamic. Try changing the declaration to look like this and see the error disappear:</p>
<p>    dynamic x = 5;</p>
<p>Or you could explicitly declare and initialize x as an int, which is probably the best option under most circumstances:</p>
<p>    int x = 5;</p>
<p>Using the int keyword, you've created a variable meant to hold integers, so if you later try to assign a string of characters to it (a String type), Dart complains. The error is back. The analyzer is just trying to keep you from shooting yourself in the foot.</p>
<p>Errors Stop Execution</p>
<p>Note that if you run the code with mismatched types, execution will fail. You should always eliminate all reported errors before attempting to run your code.</p>
<p>Why Use Explicit Types?</p>
<p>Dart was perfectly happy to let you assign any value to your variable without errors when you declared x to be of type dynamic, so why would you restrict yourself with more specific types? The language has a sound type system that's designed to help you find problems before running your code. If you intend to use x to hold integer values, like grid coordinates maybe, then it's probably a mistake to assign it a string of characters. If you use explicit type annotations, Dart can help you catch these kinds of problems before they become run-time errors—bugs.</p>
<p>The Fix is In</p>
<p>To fix things up, try this:</p>
<p>    void main() {<br/>        String x = "Dart is great.";<br/>        print(x);<br/>    }</p>
<p>Now that x is explicitly declared to be of type String, DartPad is happy, secure in the assumption that you know what you're doing. In this example, you could also have used var and allowed Dart to infer the String type from the initialization value.</p>
<p>Hey! Why is int lowercase, but String is capitalized? This may seem like a plot to make things more confusing for you than they need to be, but really the reason lies in the way programming languages have evolved over time. Dart was built to be familiar to those coming from other languages, like Java or C++. Unlike Dart, those languages have the concept of primitive types, special types that are fundamentally supported. Primitives are typically denoted by lowercase language keywords, while complex or user-defined types are capitalized. Even though all Dart types are simply objects, and Dart has no primitives, the language designers opted for familiarity in this case. </p>
<p>Fundamental Types</p>
<p>There is no limit to the number of types a program may have, but there are a few types that are fundamental to Dart:</p>
<table>
<tbody>
<tr>
<th>
<p></p>
<p></p>
<p>Type</p>
</th>
<th>Description</th>
<th>Examples</th>
</tr>
<tr>
<td>int</td>
<td>Integer (whole number)</td>
<td>5, -13, 0</td>
</tr>
<tr>
<td>double</td>
<td>Floating-point number (decimals)</td>
<td>3.14, 18.0, -33.999</td>
</tr>
<tr>
<td>num</td>
<td>Integer or floating-point number</td>
<td>5, 3.14, -13, 999.666</td>
</tr>
<tr>
<td>bool</td>
<td>Boolean</td>
<td>true, false</td>
</tr>
<tr>
<td>String</td>
<td>String of zero or more characters</td>
<td>"hi", "John Smith", "X", ""</td>
</tr>
<tr>
<td>List</td>
<td>List of values in series</td>
<td>[1, 2, 3], ["one", "two", "three"]</td>
</tr>
<tr>
<td>Map</td>
<td>Map of values by key</td>
<td>{"x": 8, "y": 16}</td>
</tr>
<tr>
<td>dynamic</td>
<td>Any type</td>
<td></td>
</tr>
</tbody>
</table>
<p>Dart art 的 const 與 final 型別</p>
<p>The "const" and "final" keywords, both of which define a variable as being a constant, a final immutable value. "final" means you can only set it once, but you can do so at runtime, while "const" means you can only set it once, but its value must be knowable at compile-time.</p>
<h4>運算子  (Operators)</h4>
<p>In Dart, operators instruct the computer to perform operations on operands. An operand is any value upon which an operation is to be carried out.</p>
<p>複合賦值運算子 (Compound Assignment Operators)</p>
<h4>字串 (Strings)</h4>
<p>Dart 的字串連結, 可以直接兩個以上單引號字串或雙引號字串連在一起, 或者透過 "+" 加號連接多個字串.</p>
<p>單位換算範例</p>
<p>判斷式</p>
<p>布林運算</p>
<p>模數運算 (Modulo Operator)</p>
<p>開關 (多中選一)</p>
<p>循環迴圈 (While Loops)</p>
<p>D0-While 迴圈</p>
<p>For 迴圈</p>
<p>函式</p>
<p>函式變數</p>
<p>函式回傳</p>
<p>變數範圍</p>
<p>數列 (Lists)</p>
<p>常數</p>
<p>Final 變數</p>
<h4>程式範例</h4>
<p><a href="https://github.com/graphicbeacon/js-dart-interop-samples">https://github.com/graphicbeacon/js-dart-interop-samples</a></p>
<p><a href="https://github.com/dart-lang/dart-pad/wiki/Gists">https://github.com/dart-lang/dart-pad/wiki/Gists</a></p>
<p>HttpClient 類別位於 dart:io 程式庫中, 只能在 Server 中執行.</p>
<p style="padding-left: 30px;"><a href="https://api.dartlang.org/stable/2.1.1/dart-io/HttpClient-class.html">https://api.dartlang.org/stable/2.1.1/dart-io/HttpClient-class.html</a></p>
<p>HttpRequest 類別位於  dart:html 程式庫中, 只能在網際 Client 中執行.</p>
<p style="padding-left: 30px;"><a href="https://api.dartlang.org/stable/2.0.0/dart-html/HttpRequest-class.html">https://api.dartlang.org/stable/2.0.0/dart-html/HttpRequest-class.html</a></p>
<p style="padding-left: 30px;"><a href="https://dart.dev/tutorials/web/fetch-data">https://dart.dev/tutorials/web/fetch-data</a></p>
<p style="padding-left: 30px;"><a href="https://codeburst.io/deploying-dart-2-apps-on-heroku-27fa120f1ec4">https://codeburst.io/deploying-dart-2-apps-on-heroku-27fa120f1ec4</a></p>
<h4>參考資料</h4>
<p style="padding-left: 30px;"><a href="https://learnxinyminutes.com/docs/dart/?ref=hackr.io">https://learnxinyminutes.com/docs/dart/?ref=hackr.io</a></p>
<p style="padding-left: 30px;"><a href="https://itnext.io/learn-dart-before-you-flutter-d1c0be6cf892">https://itnext.io/learn-dart-before-you-flutter-d1c0be6cf892</a></p><h3>Dart on Server</h3>
<p><a href="https://dart-lang.github.io/server/">https://dart-lang.github.io/server/</a></p>
<p><a href="https://aqueduct.io/">https://aqueduct.io/</a></p>
<p><a href="https://github.com/stablekernel/aqueduct">https://github.com/stablekernel/aqueduct</a></p>
<p><a href="https://stablekernel.com/dart-on-the-server-aqueduct-3-for-dart-2/">https://stablekernel.com/dart-on-the-server-aqueduct-3-for-dart-2/</a></p>
<p><a href="https://stablekernel.com/future-server-side-programming-googles-dart-2/">https://stablekernel.com/future-server-side-programming-googles-dart-2/</a></p>
<p><a href="https://stablekernel.com/binding-rest-interface-postgres-dart/">https://stablekernel.com/binding-rest-interface-postgres-dart/</a></p>
<p><a href="https://stablekernel.com/concurrency-in-server-side-dart/">https://stablekernel.com/concurrency-in-server-side-dart/</a></p>
<p><a href="https://medium.com/swlh/server-side-dart-with-postgresql-142e9eec1ed1">https://medium.com/swlh/server-side-dart-with-postgresql-142e9eec1ed1</a></p>
<p>簡單的 http 伺服器:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">import 'dart:io';

main() async {
  var server = await HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, 8080);
  print("Serving at ${server.address}:${server.port}");

  await for (var request in server) {
    request.response
      ..headers.contentType = new ContentType("text", "plain", charset: "utf-8")
      ..write('Hello, world')
      ..close();
  }
}</pre>
<p></p><h3>DartPad</h3>
<p style="padding-left: 30px;"><a href="https://dart.dev/tools/dartpad">https://dart.dev/tools/dartpad</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/dart-lang/dart-pad">https://github.com/dart-lang/dart-pad</a></p>
<p style="padding-left: 30px;"><a href="https://dart.dev/tutorials/web/low-level-html/remove-elements">https://dart.dev/tutorials/web/low-level-html/remove-elements</a></p>
<p>讓使用者所練習的 Dart 程式可以存檔, 可以呼叫修改, 也可以轉換成 Web, Mobile 與單機程式?</p>
<p>或者利用 Dart 建立一個以機械設計流程為主體的網際內容管理系統?</p>
<p>自行 Build dart-pad:</p>
<p>git clone <a href="https://github.com/dart-lang/dart-pad">https://github.com/dart-lang/dart-pad</a></p>
<p>之後, 進入 dart-pad 目錄之後, 以 pub get 取得所需 dependencies</p>
<p>然後以 webdev build 之後, 將會在 build  目錄中產生所需的相關檔案.</p>
<p>之後刪除 .git 與 .gitignore 檔案,  將 build 目錄改名為 docs 並設為 Github Pages 得到:</p>
<p><a href="https://mde.tw/dartpad">https://mde.tw/dartpad</a> </p>
<p>Canvas 繪圖範例</p>
<p>main.dart</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';
import 'dart:math' as Math;

CanvasElement canvas;    
CanvasRenderingContext2D ctx;
int width = 200;
int height = 200;

void main() {
  canvas = querySelector('#canvas');
  ctx = canvas.getContext('2d');
  
  canvas.width = width;
  canvas.height = height;
  ctx.clearRect(0, 0, width, height);

  ctx.beginPath();
  ctx.arc(75, 75, 30, 0, Math.pi * 2, true); 
  ctx.stroke();
}</pre>
<p>index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="wrapper"&gt;
  &lt;canvas id="canvas" width="450" height="450"&gt;&lt;/canvas&gt;
&lt;/div&gt;
</pre>
<p>main.css</p>
<pre class="brush:css;auto-links:false;toolbar:false" contenteditable="false">html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

#wrapper {
  width: 450px;
  margin: auto;
  border: solid thin black;
}</pre>
<h4>ROC Flag on Dartpad:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/dartpad/?id=b51f4d2a76e394421057a70e7d281b66">http://mde.tw/dartpad/?id=b51f4d2a76e394421057a70e7d281b66</a></p>
<p>將 Dart Pad 上的 rocflag.dart, index.html 與 style.css 整合為單一網際頁面的方法:</p>
<p>利用 dart2js 將 rocflag.dart 轉為 rocflag.js</p>
<p style="padding-left: 30px;">dart2js -o rocflag.js rocflag.dart</p>
<p>將 style.css 納入 index.html 中, 並導入 rocflag.js 程式.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;ROC Flag in Dart&lt;/title&gt;
  &lt;!-- 將 dartpad 中的 style.css 放入 head 標註中 &gt;
  &lt;style type="text/css"&gt;
      html, body {
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
    }

    #wrapper {
      width: 300px;
      margin: auto;
      border: solid thin black;
}
  &lt;/style&gt;
  &lt;!-- 將利用 dart2js 轉出的 rocflag.js 放入 script 標註中 &gt;
  &lt;script defer src="rocflag.js" type="application/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!-- 將 dartpad 中 index.html 的 canvas 標註放入 body 頁面中 --&gt;
&lt;div id="wrapper"&gt;
  &lt;canvas id="canvas" width="300" height="200"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p><a href="/downloads/dart_ex/rocflag/index.html">/downloads/dart_ex/rocflag/index.html</a></p>