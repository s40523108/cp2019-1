var tipuesearch = {"pages": [{'title': 'About', 'text': '', 'tags': '', 'url': 'About.html'}, {'title': '課程簡介', 'text': '說明課程進行方式, 評分方式與課程目標 \n 課程進行方式 - 每週講解與示範, 並錄下基本操作影片素材, 週四上機與助教時間, 分組建立帶有字幕的教學影片, 各組員與小組每週維護倉儲與網站內容. \n 評分方式 - 利用線上表單, 學員每週進行自評與互評, 教師根據各組員與小組所完成的教學影片, 倉儲維護歷程與網站內容進行評分, 依照上述三種成績與相關流程計算各學員期中與期末成績. \n 課程目標 - 學員可利用 Git, Fossil SCM 與 Github 進行分組協同, 獨立維護網站, 利用帶有字幕的教學影片與網頁內容進行工程表達, 學習如何利用電腦、網路與程式執行協同機械產品設計分析與開發. \n 附註: \n 因機械設計產品開發之異地協同設計需求, 而衍生出對於建立 USB 可攜程式隨身碟之必要. \n 因同步分散式程式開發之模式, 而衍生出對於分散式版次管理系統之需求. \n 因追求最佳化機械設計流程開發, 而衍生出利用程式及網路進行工程分析之需求. \n 因為透過帶字幕的教學影片製作, 可證明對於特定計算機程式主題的了解程度, 並藉由網站簡報資料的建立與發布, 可提高各學員相互學習的成效.', 'tags': '', 'url': '課程簡介.html'}, {'title': '亂數分組', 'text': '流程圖符號 \n \n 上課第一週即進行學員亂數分組, 計算機程式的實際應用與程式對應語法的介紹, 將從此一程式的開發啟動 \n 基本流程: \n 取得各班修課程成員的學號資料 \n 決定每組幾人 \n 將學員學號資料的次序弄亂 \n 依據每組幾人, 從頭開始分組, 以確定各組成員 \n 若最後一組人數過少, 將分別依序捕到前述已經分組的組別中 \n 在課程加退選階段結束後, 各組再清算所餘人數是否得當, 不排除重新分組 \n 各班檢討是否整個學期只分組一次, 或分組兩次, 或更多次的優缺點, 依據討論結果進行後續課程任務分組', 'tags': '', 'url': '亂數分組.html'}, {'title': 'github 帳號', 'text': '建立 cp2019 倉儲及對應的 CMSiMDE Github Pages 網頁 \n 了解基本的 Git 指令與 Github 系統的應用之後, 產生出對 GitExtensions 工具的需求, 也產生出對於透過 SSH keys 提交倉儲版本的需求, 以簡化改版流程. \n https://2019wcm.blogspot.com/search/label/GitExtensions \n https://2019wcm.blogspot.com/search/label/ssh \n 申請 Github 帳號 \n 登入 @gm 電子郵箱, 然後以學號申請 Github 帳號, 待驗證所使用的學號@gm 電子郵箱後, 即可建立 cp2019 倉儲, 特別注意新增 public repository 時, 可啟用 README.md, 隨即可以在近端以 \n git clone  https://github.com/學號/cp2019.git \n 將遠端 Github 倉儲中的資料, clonr 至 y:\\tmp 目錄的 cp2019 目錄中. \n clone 後的 cp2019 目錄有 .git 目錄, 存放該倉儲的設定與版本資料, 以及 README.md 檔案. \n 在 .git 目錄中, 與使用者相關的是 config \n 利用 git submodule add 納入 CMSiMDE 網際內容管理系統的程式碼 \n https://github.com/mdecourse/cmsimde \n 利用命令列視窗, 更換目錄至 y:\\tmp\\cp2019 之後, 執行 \n git submodule add https://github.com/mdecourse/cmsimde.git cmsimde \n 意即, 在此目錄中, 將 https://github.com/mdecourse/cmsimde.git 倉儲資料納為近端 cmsimde 目錄的內容, 且作為 submodule, 也就是設定一個倉儲的子模組, 並將此子模組與 https://github.com/mdecourse/cmsimde.git 倉儲目前的最新版本內容. \n 將子模組中 up_dir 目錄中的內容往前搬一個目錄 \n 在 y:\\tmp\\cp2019\\cmsimde 目錄中, 以 \n python wsgi.py \n 就可以啟動近端的動態網際內容管理系統, 作為近端改版之用, 可以瀏覽器中的 https://localhost:9443 連接所啟用的 CMS (Content Management System). \n 並以 admin 管理者密碼登入. \n 進入 config 修改網頁標題, 並且修改倉儲中的 init.py, 修改 site_title \n 改版後要推送資料前, 可以利用 generate_pages 將內容轉為動態網頁後, 可以利用 SciTE 開啟倉儲中的\xa0http-server.py 檔案後以 Tools -> Go 執行, 可以在瀏覽器中以  https://localhost:8444 \xa0檢查近端的靜態網頁內容, 確定無誤後. 則必須再退回 y:\\tmp\\cp2019 目錄之後, 必須完成 git config 的 user.name 與 user.email 之後, 可以利用: \n git add . git commit -m "提交說明" git push \n 以 SSH 對 cp2019 倉儲進行改版 \n 如何產生所需的 keys, 放在哪裡, public key 要送到哪裡, 設定如何寫, 在 http 模式下, 代理主機如何執行設定, 在 ssh 模式下, 代理主機要如何設定? 若近端啟動後使用超過一個 github 帳號身分, 又如何設定 http 與 ssh 模式下的倉儲改版與提交? \n', 'tags': '', 'url': 'github 帳號.html'}, {'title': '示範專案', 'text': 'Python: 一般運算與資料處理應用, 網際內容管理, GUI for 電腦輔助機械設計工程分析 \n ANSI C: 建立 Fossil SCM \n C++: Solvespace 與 Pyslvs 平面機構合成與分析內之幾何運算核心 \n Dart: 配合 Flutter SDK 開發手機應用程式 \n 手機程式作為介面 <-> Python Flask 作為 Server 端程式負責與其他 C/C++/Python 核心執行運算', 'tags': '', 'url': '示範專案.html'}, {'title': 'Python', 'text': '亂數分組與 CMSiMDE \n https://github.com/mdecourse/cmsimde \n', 'tags': '', 'url': 'Python.html'}, {'title': 'ANSIC', 'text': 'Fossil SCM \n https://www.fossil-scm.org', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'C++', 'text': 'Solvespace and Pyslvs \n https://github.com/solvespace/solvespace \n https://github.com/KmolYuan/Pyslvs-UI', 'tags': '', 'url': 'C++.html'}, {'title': 'Dart', 'text': 'https://dart.dev/guides/language \n https://dart.dev/tools/sdk/archive \n https://dartpad.dartlang.org/ \n https://flutter.dev/ \n https://github.com/flutter/samples \n https://github.com/Solido/awesome-flutter', 'tags': '', 'url': 'Dart.html'}]};